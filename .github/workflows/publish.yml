name: Upload Python Package

on:
  release:
    types: [created]

defaults:
  run:
    shell: bash

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'
    - name: Build
      run: |
        python -m pip install --upgrade pip setuptools
        python setup.py sdist
        ls dist
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: test
        path: test

  build_wheels:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container: quay.io/pypa/manylinux2010_x86_64

    steps:
    - uses: actions/checkout@v1
    - name: Build Binary Packages
      run: |
        function repair_wheel {
            wheel="$1"
            if ! auditwheel show "$wheel"; then
                echo "Skipping non-platform wheel $wheel"
            else
                auditwheel repair "$wheel" --plat "$PLAT" -w ./wheelhouse/
            fi
        }

        # Compile wheels
        for PYNAME in "cp36-cp36m" "cp37-cp37m" "cp38-cp38" "cp39-cp39"; do
          /opt/python/${PYNAME}/bin/pip install cython
          /opt/python/${PYNAME}/bin/pip wheel . --no-deps -w ./wheelhouse/
        done
        ls ./wheelhouse/

        # Bundle external shared libraries into the wheels
        for whl in ./wheelhouse/*.whl; do
            repair_wheel "$whl"
        done
        ls ./wheelhouse/
    - name: Upload packages
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: wheelhouse

  test:
    needs:
      - build
      - build_wheels
    runs-on: ubuntu-latest
    timeout-minutes: 4
    strategy:
      fail-fast: false
      matrix:
        container:
          - python:3.6-slim
          - python:3.7-slim
          - python:3.8-slim
          - python:3.9-slim
          - pypy:3.6-slim
          - pypy:3.7-slim

    container: ${{ matrix.container }}

    steps:
      - name: Download packages
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Download packages
        uses: actions/download-artifact@v2
        with:
          name: test
          path: test

      - name: Choose python command
        id: command
        run: |
          if [[ "${{ matrix.container }}" = pypy* ]] ;
          then
            echo "::set-output name=python::pypy3"
          else
            echo "::set-output name=python::python"
          fi

      - name: Install package
        run: |
          ${{ steps.command.outputs.python }} -m pip install --upgrade pip
          pip install draughts[test]==${GITHUB_REF##refs/tags/v} -f ./dist

      - name: Test with pytest
        run: |
          pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    container: python:3.8-slim

    steps:
    - name: Set up Python
      run:
        pip install twine
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: Publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*